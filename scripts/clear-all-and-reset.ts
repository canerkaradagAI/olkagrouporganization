import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('ðŸ§¹ TÃ¼m tablolar boÅŸaltÄ±lÄ±yor ve sayaÃ§lar sÄ±fÄ±rlanÄ±yor...')

  // BaÄŸÄ±mlÄ± tablolardan baÅŸlayarak temizle
  await prisma.positionAssignment.deleteMany()
  await prisma.employee.deleteMany()
  await prisma.position.deleteMany()
  await prisma.department.deleteMany()
  await prisma.location.deleteMany()
  await prisma.brand.deleteMany()
  await prisma.jobTitleLevel.deleteMany()
  await prisma.assignmentTypeLookup.deleteMany()

  await prisma.userRole.deleteMany()
  await prisma.roleScreenPermission.deleteMany()
  await prisma.permission.deleteMany()
  await prisma.screen.deleteMany()
  await prisma.role.deleteMany()

  await prisma.account.deleteMany()
  await prisma.session.deleteMany()
  await prisma.verificationToken.deleteMany()

  await prisma.company.deleteMany()

  // SQLite autoincrement sayaÃ§larÄ±nÄ± resetle
  // (Postgres/MySQL iÃ§in farklÄ± stratejiler gerekir; proje SQLite kullanÄ±yor)
  try {
    await prisma.$executeRawUnsafe('DELETE FROM sqlite_sequence')
    console.log('ðŸ”¢ sqlite_sequence sÄ±fÄ±rlandÄ±')
  } catch (e) {
    console.warn('sqlite_sequence sÄ±fÄ±rlanamadÄ± (SQLite dÄ±ÅŸÄ± ortam olabilir).')
  }

  console.log('âœ… TÃ¼m veriler silindi, yeni kayÄ±tlar 1\'den baÅŸlayacak.')
}

main()
  .catch((e) => { console.error(e); process.exit(1) })
  .finally(async () => { await prisma.$disconnect() })


